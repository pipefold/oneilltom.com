---
// Frontmatter (optional config)
---

<div
  id="three-container"
  style="width: 100%; height: 100%; position: fixed; top: 0; left: 0; z-index: -1000;"
>
</div>
<!-- Adjust size as needed -->

<script>
  import { unzipSync } from "fflate";
  import { texture, time, uv, oscTriangle } from "three/tsl"; // TSL nodes
  import * as THREE from "three/webgpu";

  let camera, scene, mesh, renderer;

  const planeWidth = 50;
  const planeHeight = 50;

  init();

  function init() {
    const container = document.getElementById("three-container");

    camera = new THREE.PerspectiveCamera(
      45,
      window.innerWidth / window.innerHeight,
      0.1,
      2000
    );
    camera.position.z = 70;

    scene = new THREE.Scene();

    // width 256, height 256, depth 109, 8-bit, zip archived raw data

    new THREE.FileLoader()
      .setResponseType("arraybuffer")
      .load("head256x256x109.zip", function (data) {
        const zip = unzipSync(new Uint8Array(data));
        const array = new Uint8Array(zip["head256x256x109"].buffer);

        const map = new THREE.DataArrayTexture(array, 256, 256, 109);
        map.format = THREE.RedFormat;
        map.needsUpdate = true;

        let coord = uv();
        coord = coord.setY(coord.y.oneMinus()); // flip y

        let oscLayers = oscTriangle(time.mul(0.5)); // [ /\/ ] triangle osc animation
        oscLayers = oscLayers.add(1).mul(0.5); // convert osc range of [ -1, 1 ] to [ 0, 1 ]
        oscLayers = oscLayers.mul(map.image.depth); // scale osc range to texture depth

        const material = new THREE.MeshBasicNodeMaterial();
        material.colorNode = texture(map, coord)
          .depth(oscLayers)
          .r.remap(0, 1, -0.1, 1.8); // remap to make it more visible

        const geometry = new THREE.PlaneGeometry(planeWidth, planeHeight);

        mesh = new THREE.Mesh(geometry, material);

        scene.add(mesh);
      });

    renderer = new THREE.WebGPURenderer();
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setAnimationLoop(animate);
    container.appendChild(renderer.domElement);

    window.addEventListener("resize", onWindowResize);
  }

  function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();

    renderer.setSize(window.innerWidth, window.innerHeight);
  }

  function animate() {
    render();
    // stats.update();
  }

  function render() {
    renderer.render(scene, camera);
  }
</script>
